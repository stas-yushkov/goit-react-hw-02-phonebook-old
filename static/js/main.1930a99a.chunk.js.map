{"version":3,"sources":["components/Container.jsx","components/ContactFilter/ContactFilter.styled.js","components/ContactFilter/ContactFilter.jsx","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactInputForm/ContactInputForm.styled.js","components/ContactInputForm/ContactInputForm.jsx","components/ContactsList/ListItem/StyledListItem.js","components/ContactsList/ListItem/ListItem.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","components/Button.jsx","App.jsx","index.js"],"names":["Container","styled","div","StyledContactFilter","ContactFilter","filter","onFilter","sendFilterQueryToApp","debounce","type","name","value","onChange","e","target","toLowerCase","trim","defaultProps","StyledSection","section","Title","h2","Section","title","children","StyledContactInputForm","form","ContactInputForm","state","phone","handleChange","setState","handleSubmit","preventDefault","props","onSubmit","resetState","this","pattern","required","Button","Component","StyledListItem","li","Contact","ContactName","span","ContactPhone","ListItem","contact","id","handleDel","icon","faUser","faPhone","onClick","StyledList","ul","ContactsList","contacts","map","button","App","initialContacts","addNewContact","newContact","prevState","find","newContactList","uid","alert","setFilter","nameToFilter","deleteContact","contactId","filteredArray","filterContacts","includes","filteredContacts","ReactDom","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.1930a99a.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 8px;\r\n`;","import styled from \"styled-components\";\r\n\r\nexport const StyledContactFilter = styled.div`\r\n  background-color: aqua;\r\n`;","import PropTypes from 'prop-types';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport { StyledContactFilter } from './ContactFilter.styled';\r\n\r\nconst ContactFilter = ({ filter, onFilter }) => {\r\n  const sendFilterQueryToApp = debounce(onFilter, 300);\r\n\r\n  const onFilterChange = e =>\r\n    sendFilterQueryToApp(e.target.value.toLowerCase().trim());\r\n\r\n  return (\r\n    <StyledContactFilter>\r\n      <h3>Find contacts by name</h3>\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        onChange={onFilterChange}\r\n      />\r\n    </StyledContactFilter>\r\n  );\r\n};\r\n\r\nContactFilter.defaultProps = {\r\n  filter: '',\r\n};\r\n\r\nContactFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport { ContactFilter };\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledSection = styled.section`\r\n  margin-top: 60px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n  color:red;\r\n`;","import PropTypes from 'prop-types';\r\nimport { StyledSection, Title } from './Section.styled';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <StyledSection>\r\n      <Title>{title}</Title>\r\n      {children}\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nSection.propTypes = { title: PropTypes.string, children: PropTypes.node };\r\n\r\nexport { Section };\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledContactInputForm = styled.form `\r\n\r\n`;\r\n\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Button } from 'components';\r\nimport { StyledContactInputForm } from './ContactInputForm.styled';\r\n\r\nclass ContactInputForm extends Component {\r\n  state = {\r\n    name: '',\r\n    phone: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n    this.resetState();\r\n  };\r\n\r\n  resetState = () =>\r\n    this.setState({\r\n      name: '',\r\n      phone: '',\r\n    });\r\n\r\n  render() {\r\n    return (\r\n      <StyledContactInputForm onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"phone\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            value={this.state.phone}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <Button type=\"submit\">Add</Button>\r\n      </StyledContactInputForm>\r\n    );\r\n  }\r\n}\r\n\r\nContactInputForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport { ContactInputForm };\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledListItem = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: end;\r\n`;\r\n\r\nexport const Contact = styled.div``;\r\n\r\nexport const ContactName = styled.span`\r\n  margin-right: 16px;\r\n`;\r\n\r\nexport const ContactPhone = styled.span`\r\n  margin-right: 16px;\r\n`;\r\n\r\n\r\n","import PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPhone, faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { Button } from 'components';\r\n\r\nimport {\r\n  StyledListItem,\r\n  ContactName,\r\n  ContactPhone,\r\n  Contact,\r\n} from './StyledListItem';\r\n\r\nconst ListItem = ({ contact, phone, id, handleDel }) => {\r\n  const handleDelete = () => handleDel(id);\r\n\r\n  return (\r\n    <StyledListItem>\r\n      <Contact>\r\n        <ContactName>\r\n          <FontAwesomeIcon icon={faUser} />\r\n          {contact}\r\n        </ContactName>\r\n\r\n        <ContactPhone>\r\n          <FontAwesomeIcon icon={faPhone} />\r\n          {phone}\r\n        </ContactPhone>\r\n      </Contact>\r\n      <Button type=\"button\" onClick={handleDelete}>\r\n        Delete\r\n      </Button>\r\n    </StyledListItem>\r\n  );\r\n};\r\n\r\nListItem.propTypes = {\r\n  contact: PropTypes.string.isRequired,\r\n  phone: PropTypes.string.isRequired,\r\n  id: PropTypes.string.isRequired,\r\n  handleDel: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ListItem;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledList = styled.ul`\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\n","import PropTypes from 'prop-types';\r\nimport ListItem from './ListItem/ListItem';\r\n\r\nimport { StyledList } from './ContactsList.styled';\r\n\r\nconst ContactsList = ({ contacts, handleDel }) => {\r\n  return (\r\n    <StyledList>\r\n      {contacts.map(contact => (\r\n        <ListItem\r\n          key={contact.id}\r\n          id={contact.id}\r\n          contact={contact.name}\r\n          phone={contact.phone}\r\n          handleDel={handleDel}\r\n        />\r\n      ))}\r\n    </StyledList>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  handleDel: PropTypes.func.isRequired,\r\n};\r\n\r\nexport { ContactsList };\r\n","import styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n  cursor: pointer;\r\n`;","import { Component } from 'react';\r\nimport { v4 as uid } from 'uuid';\r\n\r\nimport initialContacts from './data/initialContacts.json';\r\n\r\nimport {\r\n  ContactFilter,\r\n  Section,\r\n  ContactInputForm,\r\n  ContactsList,\r\n  Container,\r\n} from './components/';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: initialContacts,\r\n    filter: '',\r\n  };\r\n\r\n  addNewContact = newContact => {\r\n    this.setState(prevState => {\r\n      const contactNameAlreadyExist = this.state.contacts.find(\r\n        contact => contact.name.toLowerCase() === newContact.name.toLowerCase(),\r\n      );\r\n\r\n      if (contactNameAlreadyExist) {\r\n        alert(`${newContact.name} is already in contacts!`);\r\n        return;\r\n      }\r\n\r\n      const newContactList = {\r\n        contacts: [...prevState.contacts, { ...newContact, id: uid() }],\r\n      };\r\n\r\n      return { ...prevState, ...newContactList };\r\n    });\r\n  };\r\n\r\n  setFilter = nameToFilter => {\r\n    this.setState(prevState => {\r\n      return { ...prevState, filter: nameToFilter };\r\n    });\r\n  };\r\n\r\n  deleteContact = contactId => {\r\n    const filteredArray = this.state.contacts.filter(\r\n      contact => contact.id !== contactId,\r\n    );\r\n    this.setState(prevState => {\r\n      return { ...prevState, contacts: filteredArray };\r\n    });\r\n  };\r\n\r\n  filterContacts = () =>\r\n    this.state.contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(this.state.filter),\r\n    );\r\n\r\n  render() {\r\n    const filteredContacts = this.filterContacts();\r\n    return (\r\n      <div>\r\n        <Section title=\"Phonebook\">\r\n          <Container>\r\n            <ContactInputForm onSubmit={this.addNewContact} />\r\n          </Container>\r\n        </Section>\r\n\r\n        <Section title=\"Contacts\">\r\n          <Container>\r\n            <ContactFilter\r\n              filter={this.state.filter}\r\n              onFilter={this.setFilter}\r\n            />\r\n\r\n            <ContactsList\r\n              contacts={filteredContacts}\r\n              handleDel={this.deleteContact}\r\n            />\r\n          </Container>\r\n        </Section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './index.css';\r\n\r\nReactDom.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.querySelector('#root'),\r\n);\r\n"],"sourceRoot":""}